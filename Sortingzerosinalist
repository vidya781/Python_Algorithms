
Sorting zeros by recursion

L = [0,2,2,0,0,8,9,9,0,0,0,6,8,67,4,56,56,56,0,0,3,9,0,1,5]
def recursortzeros(L):
    if len(L) == 0 or len(L) == 1:
        return -1
    for i in range(1,len(L)):
        try:
            if L[i-1] == 0 and L[i] != 0:
                L[i-1],L[i] = L[i],L[i-1]
                recursortzeros(L)
        except IndexError:
            pass
    return L

y = recursortzeros(L)

indexoflastzero = y.index(0)-1

def modifylist(y):
    for i in range(1, indexoflastzero):
        if y[i-1] == y[i]:
            y[i-1] = 2*y[i]
            y[i] = 0
    return recursortzeros(y)       

z = modifylist(y)
print(z)


Sorting zeros by iteration

L = [0,4,4,4,0,0,8,9,0,0,1,45]

def getinitial(L):
    for i in range(1,len(L)):
        if L[i-1] == L[i]:
            L[i-1] = 2*L[i]
            L[i] = 0
    return L

x = getinitial(L)


def countzeros(x):
    count = 0
    for item in L:
        if item == 0:
            count += 1
    return [0]*count

y = countzeros(getinitial(L))

def getnonzeros(L):
    nonzeros = []
    for item in L:
        if item != 0:
            nonzeros.append(item)
    return nonzeros

z = getnonzeros(L)

def getfinallist(z,y):
    return z + y

print(getfinallist(z,y))
