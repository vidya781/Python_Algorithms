Strings are a vital aspect of programming. The contents of a string are typically stored in read-only sequential array in memory
meaning that strings are immutable. One can reassign a string variable to a new value, but one cannot change a particular character
in the underlying array.

Most common operations performed on strings are indexing to get a particular character or substring, joining two strings together
by concatenation, and splitting by a delimiter.

Given a word w and a string s, find all indices in s which are the starting locations of anagrams of w. Given w is ab and s is abxaba,
return[0,3,4].

from collections import Counter

def is_anagram(s1,s2):
    return Counter(s1) == Counter(s2)
    
def anagram_indices(word,s):
    result = []
    for i in range(len(s) - len(word) + 1):
        window = s[i:i + len(word)]
        if is_anagram(window, word):
            result.append(i)
    return result
    
Python's built-in Counter collection, which when aplied to a word forms a dictionary whose keys are characters and whose values
are their respective counts.

How much time would this take?

O(w x s) time where w is the length of the word and s is the length of the input string.Possible to make this faster?

In such cases, using a hash table should be used as a potential strategy. At each window we are recomputing the frequency counts
of the entire window, when only a small part of it actually is updated. If we could efficiently update these frequency counts for
each substring, the algorithm would be a lot more quicker.

Make a frequency dictionary of both the initial window and the target word. As we move along the string, we increment the count of 
each new character and decrement the count of the old. If at any point there is no difference between the frequencies of the 
target word and the current window and we add the corresponding starting index to the result.

from collections import defaultdict

def del_if_zero(dict, char):
    if dict[char] == 0:
        del dict[char]
        
def anagram_indices(word,s):
    result = []
    
    freq = defaultdict(int)
    for char in word:
        freq[char] += 1
        
    for char in s[:len(word)]:
        freq[char] -= 1
        del_if_zero(freq,char)
        
    if not freq:
       result.append(0)
       
    for i in range(len(word),len(s)):
        start_char, end_char = s[i - len(word)],s[i]
        freq[start_char] += 1
        del_if_zero(freq,start_char)
        
        freq[end_char] -= 1
        del_if_zero(freq,end_char)
        
        if not freq:
            beginning_index = i - len(word) + 1
            result.append(beginning_index)
            
     return result
     
     O(s) time and space.
