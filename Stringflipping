This programming problem was asked by LinkedIn

You are given a string consisting of the letters x and y, such as xyxxxyxyy. 
In addition, you have an operation called flip, which changes a single x to y or vice versa.

Determine how many times you would need to apply this operation to ensure that all x's come before all y's.
In the preceding example, it suffices to flip the second and sixth characters, so you should return 2.

Solution:

def split(string): 
	return [char for char in string]    # return a list of individual characters in a string
	
# Driver code 
string = 'yxxyxyxyy'
print(split(string))      # return the list

splitlist = split(string)

def flip(string):
    count = 0
    for i in range(1,len(string)):
        if splitlist[i-1] == 'y' and splitlist[i]=='x':     # Notice the criteria : only if the char left to its neighbor is y is the flipping taking place and the count being increased
            splitlist[i] == 'x'                             # flip y to x 
            count += 1                                    # increment the count
    return count
print(flip(string))

In this particular problem, the approach to developing the algorithm can be done as follows:

1] Firstly get the splitlist of the string
2] Obtain the modified list as well where we generate the newlist ( NOT in place) first by counting the x's and y's in the 
   splitlist and in this newlist align all the x's before the y's as per the condition mentioned in the problem
3] Do an index wise comparison of elements in both these lists and generate a list where the indices are mismatched
4] The length of the above generated list is the requisite number of flips.

def countxy(splitlist):
    count_x = 0
    count_y = 0
    for item in splitlist:
        if item == 'x':
            count_x += 1
        else:
            count_y += 1    # assume the string only has x and y
    return (count_x,count_y)
print(countxy(splitlist))

countsxy = countxy(splitlist)

modlist = ['x'] * countsxy[0] + ['y'] * countsxy[1]
print(modlist)
    
splitlist
modlist

def getflips(modlist,splitlist):
    idx = 0
    res = []   # resulting list
    for item in modlist:
        if item != splitlist[idx]:
            res.append(idx)
        idx = idx + 1
    return len(res)

print(getflips(modlist,splitlist))

# alternate more pythonic way of getting the number of flips

result = [idx for idx, elem in enumerate(splitlist) if elem != modlist[idx]]
print("The index positions with mismatched values:\n",result)
print(len(result))

        
