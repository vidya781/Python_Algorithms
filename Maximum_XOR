Given an array Arr of non negative numbers of size N. The task is to find the maximum possible XOR between 2 numbers in the array.

Arr = { 25, 10 , 2 , 8, 5 , 3 }

Output : 5 ^ 25 = 28

def max_xor ( arr, N) :

    maxXor = 0;
    
    # Calculating xor of each pair
    
    for i in range(n):
       for j in range(i + 1, n):
           maxXor = max(maxXor, arr[i] ^ arr[j]);
    return maxXor
    
 if __name__ == '___main___':
     arr = [25,10,2,8,5,3]
     n = len(arr)
     print(maxXor(arr,n))
     
TC : O(N)^2 where N is the size of the array


# Python3 implementation of the above approach 

# Function to return the 
# maximum xor 
def max_xor( arr , n): 
	
	maxx = 0
	mask = 0; 

	se_en = set() 
	
	for i in range(30, -1, -1): 
		
		# set the i'th bit in mask 
		# like 100000, 110000, 111000.. 
		mask |= (1 << i) 
		newMaxx = maxx | (1 << i) 
	
		for i in range(n): 
			
			# Just keep the prefix till i'th bit neglecting all the bit's after i'th bit 
			se_en.add(arr[i] & mask) 

		for prefix in se_en: 
			
			# find two pair in set  such that a^b = newMaxx which is the highest possible bit can be obtained 
			if (newMaxx ^ prefix) in se_en: 
				maxx = newMaxx 
				break
				
		# clear the set for next iteration 
		se_en.clear() 
	return maxx 

# Driver Code 
arr = [ 25, 10, 2, 8, 5, 3 ] 
n = len(arr) 
print(max_xor(arr, n)) 

