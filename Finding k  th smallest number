# Given an array and a number k where k is smaller than size of array, we need to find the kâ€™th smallest element in the given array. It is given that all array elements are distinct.

# Since there are no duplicates in the array, we can sort the given array
# if there are duplicates, we can first convert to set and then reconvert to list
# In any case, it is better to sort the list

def findksmallest(A,k = 3):
    
    if len(A)< 3:
       return -1   # the list must have at least 3 elements
    # a quest to find the 3rd smallest element
    A = A.sort()
    # to remove the duplicates if they are there
    A = list(set(A))
    return A[len(A)-3]   # we could also write return A[-k]  --general form, sorting method is O(nlogn)
    
  # So in general if we want to get the kth smallest element, we need to have a prequisite: k < len(A)
  # the final return statement could be len(A) - k

# Another way to do it is to do it in linear time by using the numpy array
import numpy
def findksmallestLinear(A,k = 3):
    import numpy

    # assuming you have a python list, you need to convert to a numpy array first
    array = numpy.array(A)
    # partition, slice back to the k smallest elements, convert back to a Python list
     k_smallest = numpy.partition(array, k)[:k].tolist()
     return k_smallest[k]
