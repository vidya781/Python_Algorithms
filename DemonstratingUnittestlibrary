The objective of this exercise is to demonstrate the Unittest library. One can use the unittest to create a comprehensive suite of tests for any project.
The unittest module i sused within the Python projects to test various standard library modules.

More documentation here: http://docs.python.org/2/library/unittest.html

We get some basic definitions in order:

Test Fxture: Define the preparation needed to perform one or more tests and any associated clean-up actions

Test Case: A test case is the smallest unit of testing in unittest. It checks for a specific response to a particular set of actions and inputs using various assert
methods provided by the unittest library. The unittest library has a base class called TestCase that may be used to create new test cases.

Test Suite: Collection of multiple tests to create group of tests representing specific functionality or modules of the application under test, which will be executed together.

Test Runner: The test runner orchestrates execution of the tests and provides the results to the user. The runner may use a GUI, a textual interface or return a special value to indicate teh results of executing 
the tests

Test Report: A test report displays a summary of test results showing the pass or fail status of executed test cases, expected versus actual results for the failed steps and
a summary of overall run and timing information.

-------------

Applying SetUp() method and Teardown() methods---Use to perform some tasks at the start of each test or all the tests defined in the class. These 
can be basic tasks like creating an instance of a browser driver, navigating to the base URL, loading test data, opening logfiles and so on.
This method takes no arguments and doesn't return anything. 

TearDown() method -- applied to clean up the values initialized by the setUp() method after a test is completed. After an instance of Firefox(0 is created, when we no longer need it, we will be closing it down using the teardown() method.

import unittest
from selenium import webdriver

class SearchTests(unittest.TestCase):
      def setUp(self):
           # create a new FF session
           self.driver = webdriver.Firefox()
           self.driver. implicitly_wait(15)
           self.driver.maximize_window()
           
           # navigate to application home page
           self.driver.get("http://google.com/")
           
      def test_search_by_category(self):
           # get the search textbox
            self.search_field = self.driver.find_element_by_name("q")
            self/search_field.submit()
            
            # get all the anchor elements which have product names
            # displayed currently on the rsult page using the find_elements_by_xpath method
            products = self.driver.find_elements_by_xpath
             ("//h2[@class='product-name']/a")
              self.assertEqual(2,len(products))
              
        def tearDown(self):
            #close the browser window
            self.driver.quit()
