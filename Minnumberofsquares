A number can always be represented as a sum of squares of other numbers. Note that 1 is a square and we can always break a number
as (1*1 + 1*1 + 1*1 + â€¦).
Given a number n, find the minimum number of squares that sum to X.

Input:  n = 100
Output: 1
Explanation:
100 can be written as 102. Note that 100 can also be written as 52 + 52 + 52 + 52, but this representation requires 4 squares.

Input:  n = 6
Output: 3

we start from 1 and go till a number whose square is smaller than or equals to n. For every number x, we recur for n-x.
Below is the recursive formula. 

def getMinSquares(n):
    if n <= 3:
        return n
        
    res = n
    
    for x in range(1,n+1):
        temp = x * x
        if temp > n:
            break
        else:
            res = min(res,1+getMinsquares(n-temp))
        return res
        
print(getMinSquares(6))

Time complexity is exponential. If we draw the recursion tree, we find some problems repeated. 
If we start from n = 6, we can reach 4 by subtracting one ( two times) and by subtracting 2 one time.

Since same subproblems are called again, this has Overlapping subproblems property.

So this has the framework of a DP problem. 

from math import ceil, sqrt

def getminSquares(n):
    
    dp = [0,1,2,3]
    
    for i in range(4,n+1):
        dp.append(i)
        for x in range(1,int(ceil(sqrt(i))) + 1):
            temp = x * x
            if temp > i
                break
            else:
                dp[i] = min(dp[i], 1 + dp[i - temp])
        return dp[n]
        
print(getminSquares[6])

