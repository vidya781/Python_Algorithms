A DP based solution to compute nCr % p

def nCrmodp(n,r,p):
    # C will store the last row of pascal triangle at the end. And last entry of last row is nCr
    C = [0 for i in range(r+1)]
    C[0] = 1  # top row of Pascal triangle

    # one by one construct the remaining rows of Pascal triangle from tp to bottom
    for i in range(1,n+1):
        # Fill entries of current row using previous row values
        for j in range(min(i,r),0,-1):
            # nCj = (n-1)Cj + (n-1)C(j-1)
            C[j] = (C[j]+C[j-1]) % p
     return C[r]

Driver prog

n = 10
r = 2
p = 13
print('Value of nCr % p is ',nCrModp(n,r,p))

TC is O(n*r) and requires O(n) space

