Segregate even and odd value nodes in singly LL

class Node:

    def __init__(self,data=None):
       self.data = data
       self.next = None

class SinglyLinkedList:
      # constructor to initialise the head
     def __init__(self):
         self.head = None

     def segregateeEvenOdd(self):
         current = None
         prev = self.head
         pivot = None

         if self.head is None or self.head.next is None:
            return self.head

          # if the first node is even, initialise pivot as head
         if prev.data % 2 == 0:
            pivot = self.head
            current = prev.next
          # else find the first node in the list that is even and make that node
           the head of the list and initialise pivot as head

          else:
              while prev.next is not None:
                   if prev.next.data % 2 == 0:
                       pivot = prev.next
                       prev.next = pivot.next
                       pivot.next = self.head
                       self.head = pivot
                       current = prev.next
                       break
                    prev = prev.next

            # keep moving the current pointer and prev pointer 
              while current is not None:
                    # if even value is found at the node
                   if current.data % 2 == 0:
                    # if the node is adjacent to pivot
                   # simply ncrement the pivot to next node
                    # and shift prev and current one step ahead
                       if prev is pivot:
                         pivot = current
                         prev = current
                         current = current.next
                 # else insert the node after the pivot
                  # shift the pivot to newly inserted node
                 # update the current and prev
                   else:
                        prev.next = current.next
                        current.next = pivot.next
                        pivot.next = current
                        current = prev.next
                     else:
                         prev = current
                         current = current.next
                return self.head

           def insertatbeg(self,data):
                node = Node(data)
                node.next = self.head
                self.head = node

            def printdata(self):
                current = self.head
                while current is not None:
                      print(current.data '->',end = '')
                      current = current.next
                print('None')

            if __name__ == '__main__':
              linked_list = SinglyLinkedList()
              linked_list.insert_at_beg(7)
              linked_list.insert_at_beg(6)
              linked_list.insert_at_beg(5)
              linked_list.insert_at_beg(4)
              linked_list.insert_at_beg(2)
              linked_list.insert_at_beg(3)
              linked_list.insert_at_beg(2)
              print('Before segregation:', end=' ')
              linked_list.print_data()
              linked_list.head = linked_list.segregateEvenOdd()
              print('After segregation:', end=' ')
              linked_list.print_data()
                  
