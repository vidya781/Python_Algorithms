Uptil now, what was commonly done was creating a new instance of Firefox using the setUp() method before the execution of each test method and closed down
that instance after the execution of the test method.

Here we see an example of sharing a single Firefox instance between the methods instead of creating a new instance every time. We see how using te @classmethod decorator.
These methods allow us to initialize values betweeen the test methods.

So here we go: Class level setUp() and tearDown() methods

import unittest
from selenium import webdriver

class SearchTests(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        # create a new Firefox session
        cls.driver = webdriver.Firefox()
        cls.driver.implicitly_wait(15)
        cls.driver.maximize_window()
        
        #navigate to the application home page
        cls.driver.get("http://google.com/")
        cls.driver.title
        
    def test_search_by_category(self):
        # get the search textbox
        self.search_field = self.driver.find_element_by_name("q")
        self.search_field.clear()
        
    # enter search keyword and submit
        self.search_field.send_keys("phones")
        self.search_field.submit()
        
    # get all the anchor elements which have prduct names
    # displayed currently on result page using
    # find_elements_by_xpath method
    products = self.driver.find_elements_by_xpath
       ("//h2[@class='product-name']/a")
       self.assertEqual(2,len(products))
       
    def test_search_by_name(self):
         # get the search textbox
         self.search_field = self.driver.find_element_by_name("q")
         self.search_field.clear()
         
         # now enter search keyword and submit it
         self.search_field.send_keys("gland")
         self.search_field.submit()
         
         # get all the anchor elements which have product names
         # displayed currently on result page using find_elements_by_xpath method
         products = self.driver.find_elements_by_xpath
             ("//h2[@class='product-name;]/a")
         self.assertEqual(1,len(products))
         
     @classmethod
     def tearDownClass(cls):
         #close the browser window
         cls.driver.quit()
         
     if __name__ == '__main__':
        unittest.main()
