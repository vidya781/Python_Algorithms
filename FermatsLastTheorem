
No 3 positive integers a,b c satisfy a^n + b^n = c^ n for any integer n greater than 2

from decimal import Decimal

def root(num,power):
    return Decimal(num ** Decimal(1 /power))

def two_numbers():
    a = b = 1
    while True:
        yield a,b
        if a == b:
           a += 1
           b = 1
        else:
           b += 1

def test(a,b):
    return root((a*power) + (b**power)) % 1 == 0

power = int(input('Power: '))

generator = two_numbers()
for a,b in generator:
    result = test(a,b)
    print(a,b, result)
    if result:
       break

#Python program to find
#modular inverse of a under modulo m using Fermats Last Theorem (FLT)
#only works if m is prime

def __gcd(a,b):
    if(b==0):
       return a
    else:
       return _gcd(b, a % b)

   #Compute x^y under modulo m
def power(x,y,m):
    if(y == 0):
       return 1
    p = power(x,y // 2,m) % m
    p = (p*p) % m
    return p if(y % 2 == 0) else (x * p) % m

    #Function to find modular
    # inverse of under modulo m
    # assumption: m is prime

def modInverse(a,m):
    
    if (__gcd(a.m) != 1):
       print("Inverse does not exist")

     else:
        # If a and m are relatively prime, then mod inverse is a^(m-2) mode m
       print("Modular multiplicative inverse is ",
             power(a,m-2,m))

a = 3
m = 11
modInverse(a,m)

