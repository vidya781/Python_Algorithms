Given the head of a singly linked list, reverse it in place.

Solution:

Consider the linked list has just one element, such as 15? Then we need to return only that node, since it is already sorted.

If the Linked list has two elements, then the pointers need to be rearranged so that the tail becomes the head and the head 
becomes the tail.

For any recursive solution which we shall attempt here, we require a base case and inductive case.

Consider the base case and an inductive case.

For an empty linked list, one should return null, since it is trivially already sorted. For a linked list with one element, 
we need only return the one element.

Consider a linked list with an arbitrary number of elements. How can we reverse it, assuming we can reverse smaller linked
lists in place?

Suppose we take the head node and store it in a variable. Take the head's next which is a smaller linke dlist and revursively 
reverse that---we call this the smaller, reverse linked list s. The head must be reattached to the end of s after which we return 
the head of s.

a -----------> s   ( s be the tail of the linked list ) [ list without the head ]

Recursively call recurse on the tail, and then reattach a to the end.

s-----------------> a 

We call upon this helper function:

def reverse(node):
    # _reverse() reverses and returns both head and tail.
    
    head, _ = _reverse(node)
    return head
    
def _reverse(node):
    if node is None:
       return None, None
       
    if node.next is None:
        return node, node
        
    # Reverse rest of the linked list and move node to after tail
    head, tail = _reverse(node.next)
    node.next = None
    tail.next = node
    return head,node
    
O(n) time, which is optimal---cannot reverse a list without traversing through all its elements at least once.

It also runs in O(n) space, since each call to reverse adds to our call stack.

We would like to update the list as we traverse it. As we do so, we will need to change each node so that it points 
to the node that came before it, instead of the one after. We now use a technique that is very common in linked list problems;
iterating over the list with two pointers.

We maintain two pointers : current and prev. As the current pointer traverses the list, prev follows the one behind. At each step
set the current node's next to point to the previous node and then move both pointers forward. Finally we return the last node.

def reverse(head):
    prev, current = None, head
    while current is not None:
          # Make current node point to prev and move both forward one
          tmp = current.next
          current.next = prev
          prev = current
          current = tmp
    return prev
    
  This solution uses only constant space.
