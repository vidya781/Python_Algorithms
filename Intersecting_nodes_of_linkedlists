Given two singly linked lists that intersect at some point, find the intersecting nodes. Assume the lists are non cyclical.

For example, given A = 3 --> 7 ---> 8 ---> 10 and B = 99 ---> 1--->8-----> 10 return the node with value 8.
Assume the nodes with the same value are the exact same node objects.

The goal is to do this in O(m+n) time where m and n are the lengths of the lists and constant space.

Solution:

How would a naive solution work?

Iterate through one of the lists and add each node to a set. Then iterate over the othe rlist and check each node to see
if it is in the set, and then return the first node present in the set. This takes O(m+n) time and also O(m+n) space a we do not have 
any knowledge of which list is longer. So the key question is : How can we reduce the amount of space we need?

What if we get the length of both the lists. Find the difference between the two, and keep two pointers at the head of each list.
Move the pointer of the larger list up by the difference, and then move the pointers forward in conjunction till they match.

def length(head):
    if not head:
        return 0
    return 1 + length(head.next)
    
def intersection(a,b):
    m.n = length(a),length(b)
    current_a, current_b = a,b
    
    if m > n:
        for _ in range(m - n):
            current_a = current_a.next
    else:
        for _ in range(n - m):
            current_b = current_b.next    # depending on which of the two lists is bigger
            
    while current_a != current_b:
        current_a = current_a.next
        current_b = current_b.next
    return current_a
    
    Takes O(m + n) time 
    
    # adapted from DCP-Miller et al
