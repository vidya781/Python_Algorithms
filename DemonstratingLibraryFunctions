# Python prog to demo lib functions to save time while using the example of map()

# slower(without map())

start = time.clock()
s = 'python'
U = []
for c in s:
    U.append(c.upper())
print U           # converts to upper case and prints the word PYTHON
elapsed = time.clock()
e1 = elapsed - start
print ("Time spent in function is: "), e1

# However the built in function uses map()

s = 'python'
start = time.clock()
U = map(str.upper,s)
print U
elapsed = time.clock()
e2 = elapsed - start
print ("Time spent in builtin function is: "),e2

# Python prog to demo list like container with fast appends and pops on either end

from collections import deque
s = 'python'

# make new deque
d = deque(s)

# add new entry to right side
d.append('y')

# add a new entry to the left side
d.appendleft('h')
print d

d.pop() # return and remove rightmost item

d.popleft() # return and remove leftmost item

print(list(reversed(d))


-------

Using keys for sorts: use key argument to the builtin sort instead which is a faster way to sort

somelist = [1,-3,6,11,5]

somelist.sort()
print somelist

s = 'python'
s = sorted(s)   # use sorted if one doesnt want to sort in place
print s

Writing idiomatic code will make code run faster in most cases

s = 'hipython'
slist = ''
for i in s:
    slist = slist + i
print slist      # slow O(n^2)

# string concatenation(fast O(n))

st = 'hihello'
slist = ''.join([i for i in s])
print slist

# better way to iterate range
evens = [ i for i in range(10) if i%2 == 0]
print evens

# less faster

i = 0
evens = []
while i < 10:
    if i % 2 == 0: evens.append(i)
       i += 1
print evens

#slow

v = 'for'
s = 'python' + v + 'craft'
print s

# fast
s = 'python %s craft'%v
print s


mydict = {'l':1,'i':1,'c':1,'k':1}
word = 'lickforlicks'
for w in word:
   if w not in mydict:
        mydict[w] = 0
   mydict[w] += 1
print mydict

# faster

mydict = {'l':1,'i':1,'c':1,'k':1}
word = 'lickforlicks'
for w in word:
    try:
       mydict[w] += 1
    except KeyError:
       mydict[w] = 1
print mydict

#Output is same, only diff is how output is obtained

Use xrange instead of range: range()--returns a lis of numbers using the range functiomn

xrange()-function returns the generator object that can be used to display numbers only by looping

# slower
x = [i for i in range(0,10,2)]
print x

# faster
x = [ i for i in xrange(0,10,2)]
print x

Range yields a list xrange() yields only one integer elem in sequence at a time

Python mutiple assignment to swap the variables

x = 2
y = 5
temp = x
x = y
y = temp
print x,y

x,y = 3,5
x,y = y,x
print x,y

Use local variable if poss:

Python faster retrieving a local variable than retrieving a global variable. Generally spaking avoid using 'global' keyword.
If one is going to access a method often(inside loop) consider writing it to variable

class Test:
   def func(self,x):
       print x + x

Obj = Test()
mytest = Obj.func # declaring local var
n = 2
for i in range(n):
    mytest(i)  # faster than Obj.func(i)
