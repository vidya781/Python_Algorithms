"""Given an array or list as input put all 0s at the end and if the number is repeated, add the number and and put the next index value to 0

[0 2 2 2 0 6 6 0 8]

This transforms to [ 0 4 0 2 0 12 0 8]

This further transforms to [4 2 12 8 0 0 0 0]"""

"Method 1--without recursion"

L = [0,2,2,2,0,6,6,0,8]

def getinitial(L):
    for i in range(1,len(L)):   # The initial condition if 2 neighboring elements are identical double the element and make its neighbor as zero
        if L[i-1] == L[i]:
            L[i-1] = 2*L[i]
            L[i] = 0
    return L

x = getinitial(L)


def countzeros(x):
    count = 0
    for item in L:          # get count of zeros and return a list initialised with zeros having length count
        if item == 0:
            count += 1
    return [0]*count

y = countzeros(getinitial(L))

def getnonzeros(L):
    nonzeros = []         # get a separatelist of non zero elements 
    for item in L:
        if item != 0:
            nonzeros.append(item)
    return nonzeros

z = getnonzeros(L)

def getfinallist(z,y):
    return z + y         # get the final concatenated list

print(getfinallist(z,y))

------------------------------------------------------------------------------------

"Method 2--with recursion"

L = [0, 2, 2, 2, 0, 6, 6, 0, 8]

def recursortzeros(L):
    if len(L) == 0 or len(L) == 1:
        return -1
    for i in range(1,len(L)):
        try:
            if L[i-1] == 0 and L[i] != 0:
                L[i-1],L[i] = L[i],L[i-1]      # apply recursion to keep swapping till zeros are huddled at the end together
                recursortzeros(L)
        except IndexError:
            pass
    return L

y = recursortzeros(L)

indexoffirstzero = y.index(0)-1    # we need not traverse the entire list but stop at the index prior to the first zero

def modifylist(y):
    for i in range(1, indexoffirstzero):
        if y[i-1] == y[i]:                  # make the modification if the two neighboring elements are identical
            y[i-1] = 2*y[i]
            y[i] = 0
    return recursortzeros(y)       

z = modifylist(y)
print(z)


