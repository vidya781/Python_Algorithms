Objects can behave as functions

All functions are objects in Python
All objects are NOT functions in Python

Are callable which allows the functionality of treating like functions

class Adder:
   def __init__(self,n):
       self.n = n

   def __call__(self,x):
       return self.n + x

plus3 = Adder(3)
plus3(4)


How to check if an object is callable?

callable(plus3)

Behind the scenes, calling an object instance as a function attempts to execte the objects __call__ method

Functions can be passed to other functions

def greet(func):
    greeting = func("In Python program')
    print(greeting)

Python's functions are first class--assign them to variables,store them in DS, pass them as arguments to other functions and return them as values from other functions

Consider the foll code

def yell(text):
    return text.upper() + '!'

yell('hello')

bark = yell

# yell function is an object in Python and one can assign it to another variable just like any other object

bark only points to yell, doesnt call it

bark('woof')

del yell

yel('hello?')  # NameError obtained

bark('hey')
HEY!

bark.__name__
'yell'

# Python attaches a string identifier to evry function at creation time for debugging purposes 

Note that __name__ is still 'yell' taht does not affect how one can access the function object from the code.
The name identifier is merely a debugging aid and a variable pointing to a function and the function itself are really 2 different things

Main takeways:

Everything in Python is an object, including functions. One can assign them to variables, store them in DS and pass or return them to and from other functions ( first class functions)
First class functions allow one to abstract away and pass around behavior in ones programs

Functions can be nested and they can capture and carry some of the parent's functions state with them and such functions are called closures

Objects can be callable and this allows one to treat them like functions

Nested scope and closures:

def get_speak_func(text,volume):
    def whisper():
        return text.lower() + '...'

    def yell():
        return text.upper() + ' !'
    
    if volume > 0.5:
        return yell
  
    else:
        return whisper

get_speak_func('Hello World',0.7)()
# HELLO WORLD

although whisper and yell do not have parameters of their own, they remember state that of the parent's parameters
and this is because of the lexical closures or scopes.

A closure remembers the values from its enclosing lexical scope even when the program flow is no longer in that scope

