Consider the page objects pattern which is a hihly used pattern amongst th Selenium User Community to structure the tests making them separate from low level actions
and providing a higher level of abstraction. This pattern is oftn compared to the facade pattern which enables creating a simplified interface for complex code.

The POP offers creating an object representing each web page from the application under test.We can define classes for each page, modelling all attributes and actions for that page. 
This creates a layer of separation between the test code and technical implementation of pages and application functionality that we will be testing, by hiding the locators and other
low level methods dealing with the elements, and business functionality. Instead, the page objects will provide a high level API for tests to deal with the page functionality.

Tests shoud use these page objects at a high level, where any change in attributes or actions in the underlying page should not really break the test.

Following are the benefits:

1) Create a high-level abstraction that helps to minimize changes when the underlying page is modified by developers. Only the page object need be changed in this case and the calling tests will be unaffected.
2) Create reusable code that can be shared across multiple test cases
3) Tests are more readable,flexible and maintainable.

We implement a BaseTestCase class which will provide us with SetUp() and tearDown() methods so that we do not need to write these for each test class we  create.
Creating a basetestcase.py

import unittest
from selenium import webdriver

class BaseTestCase(unittest.TestCase):
    def setUp(self):
        #create a new FF session
        self.driver = webdriver.Firefox()
        self.driver. implicitly_wait(15)
        self.driver.maximize_window()
        
        # navigae to application homepage
        self.driver.get('http://demo.magentocommerce.com/')
        
    def tearDown(self):
        #close the browser window
        self.driver.quit()
        
    The BasePage object
    
    The BasePage object will act as a parent object for all the page objects that one creates in the test suite. The base page provide 
    common code that the page object can use. 
    
    from abc import abstractmethod
    class BasePage(object):
        """ All page objects inherit from this"""
        
        def __init__(self,driver):
            self._validate_page(driver)
            self.driver = driver
            
        @abstractmethod
        def _validate_page(self,driver): # will be implemented by the page objects inheriting from BasePage to validate that the page they represent is loaded in the browser
                                           before the test can use attributes or actions.
            return
            
        """Regions define functionality available through all page objects"""
        @property
        def search(self):
            from search import SearchRegion
            return SearchRegion(self.driver)
            
     class InvalidPageException(Exception):
         """Throw this exception when you do not find the correct page """
         pass
         
   Implementing page objects:
   
   from base import BasePage
   from base import InvalidPageException
   
   class HomePage(BasePage):
       _home_page_slideshow_locaotor = 'div.slideshow-container'
       def __init__(self,driver):
           super(HomePage,self).__init__(driver)
       def _validate_page(self,driver):
           try:
               driver.find_element_by_class_name
                 (self.__home_page_slideshow_locator)
           except:
               raise InvalidPageException
                   ("Home Page Not Loaded")
                   
  Now implementing the SearchRegion class which handles the search feature of the application. Provides the searchFor() method. Creates a new search.py and 
  implement the following code.
  
  from base import BasePage
  from base import InvalidPageException
  from product import ProductPage
  
  class SearchRegion(BasePage):
      _search_box_locator = 'q'
      
      def __init__(self,driver):
          super(SearchRegion,self).__init__(driver)
          
      def searchFor(self,term):
          self.search_field = self.driver.find_element_by_name(self.__search_box_locator)
          self.search_field.clear()
          self.search_field.send_keys(term)
          self.search_field.submit()
          return SearchResults(self.driver)
          
    class SearchResults(BasePage):
        _product_list_locator = 'u1.products-grid > li'
        _product_name_locator = 'h2.product-name a'
        _product_image_link = 'a.product-image'
        _page_title_locator = 'div.page-title'
        
        _products_count = 0
        _products = {}
        
        def __init__(self,driver):
            super(SearchResults,self).__init__(driver)
            results = self.driver.find_elements_by_css_selector
                (self.__product_list_locator)
            for product in results:
                name = product.find_element_by_css_selector
                   (self.__product_name_locator).text
                self._products[name] = 
                    product.find_element_by_css_selector
                    (self._product_image_link)
                    
        def _validate_page(self,driver):
            if 'Search results fo' not in driver.title:
                raise InvalidPageException
                   ('Search results not loaded')
                   
        @property
        def product_count(self):
            return len(self._products)
            
        def get_products(self):
            return self._products
            
        def open_product_page(self,product_name):
            self._products[product_name].click()
            return ProductPage(self.driver)
            
      Implementing the ProductPage class which has some attributes related to a product. We can access a product from the SearchResultys class,
      which has a method to open the product details page for a given product.
      Create a product.py file and implement the ProductPage class as shown below:
      
      from base import BasePage
      from base import InvalidPageException
      
      class ProductPage(BasePage):
         _product_view_locator = 'div.product-view'
         _product_name_locator = 'div.product-name span'
         _product_description_locator = 'div.tab-content div.std'
         _product_stock_status_locator = 'p.availability span.value'
         _product_price_locator = 'span.price'
         
         def __init__(self,driver):
             super(ProductPage,self).__init__(driver)
             
             @property
             def name(self):\
                 return self.driver.\
                     find_element_by_css_selector
                       (self._product_name_locator)\
                       .text.strip()
                       
             @property
             def description(self):
                 return self.driver.\
                     find_element_by_css_selector
                       (self._product_description_locator)\
                     .text.strip()
                     
             @property
             def stock_status(self):
                 return self.driver.\
                     find_element_by_css_selector
                       (self._product_stock_status_locator)\
                     .text.strip()
                     
             @property
             def price(self):
                 return self.driver.\
                     find_element_by_css_selector
                        (self._product_price_locator)\
                     .text.strip()
                     
             def validate_page(self,driver):
                 try:
                     driver.find_element_by_css_selector
                      (self._product_view_locator)
                 except:
                     raise InvalidPageException
                      ('Product page not loaded')
   
   Creating a test with page objects
   
   We need to create a test that uses baseTestCase and calls the page objects that we created to test the search feature of the application.
   
   
   import unittest
   from homepage import HomePage
   from BaseTestCase import BaseTestCase
   
   class SearchProductTest(BaseTestCase):
       def testSearchForProduct(self):
           homepage = HomePage(self.driver)
           search_results = homepage.search.searchFor('earphones')
           self.assertEqual(2,search_results.product_count)
           product = search_results.open_product_page('Johnson earbuds')
           self.assertEqual('Madison Earbuds','product.name)
           self.assertEqual('$35.00',product.price)
           self.assertEqual('IN STOCK',product.stock_status)
           
    if __name__ == '__main__':
       unittest.main(verbosity=2)
       
       We did not write the setUp() and the tearDown() methods in this test. We inherited this test class from baseTestCase which implements these methods.
       We could overload these methods if we want to do test specific setup or clean up.
            
            
          
           
           
       
